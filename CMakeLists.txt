cmake_minimum_required(VERSION 3.21)

# include some defines automatically made by qpm
include(qpm_defines.cmake)

project(${COMPILE_ID})

# c++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

message("Building ${COMPILE_ID} version ${MOD_VERSION} with ID ${MOD_ID} ${CMAKE_BUILD_TYPE}")

# Enable interprocedural optimization (LTO) only for Release builds
if(CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
        add_compile_options(-O3)
else()
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE)
endif()

# Always export compile commands for tooling support
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# define that stores the actual source directory
set(SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

# compile options used
add_compile_options(-frtti -fexceptions)

# compile definitions used
add_compile_definitions(VERSION=\"${MOD_VERSION}\")
add_compile_definitions(MOD_ID=\"${MOD_ID}\")
add_compile_definitions(USE_CODEGEN_FIELDS)

# recursively get all src files
RECURSE_FILES(cpp_file_list ${SOURCE_DIR}/*.cpp)
RECURSE_FILES(c_file_list ${SOURCE_DIR}/*.c)

RECURSE_FILES(inline_hook_c ${EXTERN_DIR}/includes/beatsaber-hook/shared/inline-hook/*.c)
RECURSE_FILES(inline_hook_cpp ${EXTERN_DIR}/includes/beatsaber-hook/shared/inline-hook/*.cpp)

# add all src files to compile
add_library(
        ${COMPILE_ID}
        SHARED
        ${cpp_file_list}
        ${c_file_list}
        ${inline_hook_c}
        ${inline_hook_cpp}
)

# Ensure the final .so name matches mod.json ("libnoodleextensions.so")
set_target_properties(${COMPILE_ID} PROPERTIES OUTPUT_NAME "noodleextensions")

# add src dir as include dir
target_include_directories(${COMPILE_ID} PRIVATE ${SOURCE_DIR})

# add include dir as include dir
target_include_directories(${COMPILE_ID} PRIVATE ${INCLUDE_DIR})

# add shared dir as include dir
target_include_directories(${COMPILE_ID} PUBLIC ${SHARED_DIR})

# codegen includes
target_include_directories(${COMPILE_ID} PRIVATE ${EXTERN_DIR}/includes/${CODEGEN_ID}/include)

target_link_libraries(${COMPILE_ID} PRIVATE -llog)

# add extern stuff like libs and other includes
include(extern.cmake)

# Robust strip/rename steps that track the actual built file
add_custom_command(TARGET ${COMPILE_ID} POST_BUILD
        COMMAND ${CMAKE_STRIP} -d --strip-all
                "$<TARGET_FILE:${COMPILE_ID}>"
                -o "$<TARGET_FILE_DIR:${COMPILE_ID}>/stripped_$<TARGET_FILE_NAME:${COMPILE_ID}>"
        COMMENT "Strip debug symbols on final binary."
)

add_custom_command(TARGET ${COMPILE_ID} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory "$<TARGET_FILE_DIR:${COMPILE_ID}>/debug"
        COMMENT "Create debug/ directory for unstripped binary"
)

add_custom_command(TARGET ${COMPILE_ID} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E rename
                "$<TARGET_FILE:${COMPILE_ID}>"
                "$<TARGET_FILE_DIR:${COMPILE_ID}>/debug/$<TARGET_FILE_NAME:${COMPILE_ID}>"
        COMMENT "Move unstripped library to debug/ folder"
)

add_custom_command(TARGET ${COMPILE_ID} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E rename
                "$<TARGET_FILE_DIR:${COMPILE_ID}>/stripped_$<TARGET_FILE_NAME:${COMPILE_ID}>"
                "$<TARGET_FILE:${COMPILE_ID}>"
        COMMENT "Replace original with stripped library"
)
